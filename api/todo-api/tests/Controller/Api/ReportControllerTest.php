<?php

namespace App\Tests\Controller\Api;

use App\Entity\Audit;
use App\Repository\AuditRepository;
use JetBrains\PhpStorm\ArrayShape;

class ReportControllerTest extends AbstractControllerTest
{
    protected AuditRepository $auditRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->auditRepository = $this->getContainer()->get('doctrine')
            ->getRepository(Audit::class);
    }

    #[ArrayShape(['id' => "int", 'taskId' => "int", 'action' => "string", 'description' => "string", 'performedAt' => "string"])]
    protected static function getAuditAsJson(Audit $audit): array
    {
        return [
            'id' => $audit->getId(),
            'taskId' => $audit->getTaskId(),
            'action' => $audit->getAction(),
            'description' => $audit->getDescription(),
            'performedAt' => $audit->getPerformedAt()->format('c')
        ];
    }

    protected static function getAuditsArrayAsJson(array $audits): array
    {
        return array_map(fn($a) => static::getAuditAsJson($a), $audits);
    }

    /**
     * @param \Closure $getAudits
     * @param string $queryStr
     * @throws \App\Exceptions\InvalidActionException
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     * @dataProvider provideForTestIndex
     */
    public function testIndex(string $queryStr='', string $repoFn='findWithExistentTasks', array $repoFnArgs=[]): void
    {
        $task1 = $this->toDoRepository->create("Test task 1");
        $task2 = $this->toDoRepository->create("Test task 2");
        $task3 = $this->toDoRepository->create("Test task 3");
        $task4 = $this->toDoRepository->create("Test Task 4");
        $this->toDoRepository->update($task4, title: "Test task 4");
        $this->toDoRepository->update($task2, completed: true);
        $this->toDoRepository->update($task3, completed: true);
        $this->toDoRepository->remove($task3);

        $this->client->request('GET', "/api/report$queryStr");
        $response = $this->client->getResponse();

        $expectedAudits = call_user_func_array([$this->auditRepository, $repoFn], $repoFnArgs);
        $this->assertHttpOk($response);
        $this->assertResponseRepresents($this->getAuditsArrayAsJson($expectedAudits), $response);
    }

    /**
     * @return array[] arguments
     */
    public function provideForTestIndex(): array
    {
        return [
            ['', 'findWithExistentTasks'],
            ['?action=create', 'findBy', [['action' => 'create']]],
            ['?sortByTask=1', 'findWithExistentTasks', [['task_id' => 'asc']]],
            ['?action=create&sortByTask=1', 'findBy', [['action' => 'create'], ['task_id' => 'asc']]],
            ['?sortByTask=-1', 'findWithExistentTasks', [['task_id' => 'desc']]],
            ['?action=create&sortByTask=-1', 'findBy', [['action' => 'create'], ['task_id' => 'desc']]],
        ];
    }

    public function testListByTaskOk(): void
    {
        $task1 = $this->toDoRepository->create("Test task 1");
        $task2 = $this->toDoRepository->create("Test task 2");
        $task3 = $this->toDoRepository->create("Test task 3");
        $task4 = $this->toDoRepository->create("Test Task 4");
        $this->toDoRepository->update($task4, title: "Test task 4");
        $this->toDoRepository->update($task2, completed: true);
        $this->toDoRepository->update($task3, completed: true);
        $this->toDoRepository->remove($task3);

        $this->client->jsonRequest('GET', "/api/report/{$task2->getId()}");
        $response = $this->client->getResponse();

        $this->assertHttpOk($response);
        $expectedAudits = $this->auditRepository->findBy(['task_id' => $task2->getId()]);
        $this->assertResponseRepresents($this->getAuditsArrayAsJson($expectedAudits), $response);
    }

    public function testListByTaskEmpty(): void
    {
        $this->client->jsonRequest('GET', "/api/report/0");
        $response = $this->client->getResponse();

        $this->assertHttpOk($response);
        $this->assertResponseRepresents([], $response);
    }

    protected static function assertResponseRepresents(array $ArrayJsonRepresentation, $response): void
    {
        $content = $response->getContent();
        static::assertJson($content);
        static::assertJsonStringEqualsJsonString(json_encode($ArrayJsonRepresentation), $content);
    }
}
